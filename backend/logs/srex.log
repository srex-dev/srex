2025-06-12 03:11:42,971 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:11:42,971 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:11:43,191 - srex - ERROR - Error configuring adapter: Adapter not found: InvalidAdapter
2025-06-12 03:11:43,191 - srex - ERROR - Error configuring adapter: Adapter not found: InvalidAdapter
2025-06-12 03:11:43,288 - srex - INFO - Generating policy from input: Ensure all S3 buckets have versioning enabled
2025-06-12 03:11:43,288 - srex - INFO - Generating policy from input: Ensure all S3 buckets have versioning enabled
2025-06-12 03:11:43,309 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:11:43,309 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:11:43,309 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:11:43,309 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:11:43,310 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:11:43,310 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:11:43,310 - srex - INFO - Model: llama2
2025-06-12 03:11:43,310 - srex - INFO - Model: llama2
2025-06-12 03:11:43,310 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:11:43,310 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:11:43,310 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:11:43,310 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:11:59,112 - srex - INFO - Test response status: 200
2025-06-12 03:11:59,112 - srex - INFO - Test response status: 200
2025-06-12 03:11:59,123 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:11:59.051003Z","response":"Hello there! How can I help you today? Is there something you want to talk about or a question you want to ask?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,727,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,366,864,304,5193,1048,470,263,1139,366,864,304,2244,29973],"total_duration":15737301939,"load_duration":6611261870,"prompt_eval_count":21,"prompt_eval_duration":3985564081,"eval_count":27,"eval_duration":5114461232}
2025-06-12 03:11:59,123 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:11:59.051003Z","response":"Hello there! How can I help you today? Is there something you want to talk about or a question you want to ask?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,727,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,366,864,304,5193,1048,470,263,1139,366,864,304,2244,29973],"total_duration":15737301939,"load_duration":6611261870,"prompt_eval_count":21,"prompt_eval_duration":3985564081,"eval_count":27,"eval_duration":5114461232}
2025-06-12 03:12:25,806 - srex - INFO - Response status: 200
2025-06-12 03:12:25,806 - srex - INFO - Response status: 200
2025-06-12 03:12:25,808 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:12:25.802628Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 26663736060,
  "load_duration": 12265678,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 17603876136,
  "eval_count": 60,
  "eval_duration": 9047115513
}
2025-06-12 03:12:25,808 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:12:25.802628Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 26663736060,
  "load_duration": 12265678,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 17603876136,
  "eval_count": 60,
  "eval_duration": 9047115513
}
2025-06-12 03:12:25,809 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:12:25,809 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:12:25,952 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:12:25,952 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:12:25,953 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:12:25,953 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:12:25,953 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:12:25,953 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:12:25,953 - srex - INFO - Model: llama2
2025-06-12 03:12:25,953 - srex - INFO - Model: llama2
2025-06-12 03:12:25,953 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:12:25,953 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:12:25,953 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:12:25,953 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:12:27,745 - srex - INFO - Test response status: 200
2025-06-12 03:12:27,745 - srex - INFO - Test response status: 200
2025-06-12 03:12:27,746 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:12:27.743508Z","response":"Hello! How can I help you today?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,29991,1128,508,306,1371,366,9826,29973],"total_duration":1786795940,"load_duration":10092144,"prompt_eval_count":21,"prompt_eval_duration":352503744,"eval_count":10,"eval_duration":1423708767}
2025-06-12 03:12:27,746 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:12:27.743508Z","response":"Hello! How can I help you today?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,29991,1128,508,306,1371,366,9826,29973],"total_duration":1786795940,"load_duration":10092144,"prompt_eval_count":21,"prompt_eval_duration":352503744,"eval_count":10,"eval_duration":1423708767}
2025-06-12 03:12:54,542 - srex - INFO - Response status: 200
2025-06-12 03:12:54,542 - srex - INFO - Response status: 200
2025-06-12 03:12:54,543 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:12:54.539725Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 26785498264,
  "load_duration": 13568756,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 17818571833,
  "eval_count": 60,
  "eval_duration": 8952644937
}
2025-06-12 03:12:54,543 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:12:54.539725Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 26785498264,
  "load_duration": 13568756,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 17818571833,
  "eval_count": 60,
  "eval_duration": 8952644937
}
2025-06-12 03:12:54,544 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:12:54,544 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:12:54,660 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:12:54,660 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:12:54,661 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:12:54,661 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:12:54,661 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:12:54,661 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:12:54,661 - srex - INFO - Model: llama2
2025-06-12 03:12:54,661 - srex - INFO - Model: llama2
2025-06-12 03:12:54,661 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:12:54,661 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:12:54,662 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:12:54,662 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:12:58,450 - srex - INFO - Test response status: 200
2025-06-12 03:12:58,450 - srex - INFO - Test response status: 200
2025-06-12 03:12:58,450 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:12:58.44924Z","response":"Hello there! How can I help you today? Is there something specific you would like to know or talk about?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,727,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,2702,366,723,763,304,1073,470,5193,1048,29973],"total_duration":3784430773,"load_duration":9539154,"prompt_eval_count":21,"prompt_eval_duration":352621993,"eval_count":24,"eval_duration":3421795774}
2025-06-12 03:12:58,450 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:12:58.44924Z","response":"Hello there! How can I help you today? Is there something specific you would like to know or talk about?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,727,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,2702,366,723,763,304,1073,470,5193,1048,29973],"total_duration":3784430773,"load_duration":9539154,"prompt_eval_count":21,"prompt_eval_duration":352621993,"eval_count":24,"eval_duration":3421795774}
2025-06-12 03:13:23,447 - srex - INFO - Response status: 200
2025-06-12 03:13:23,447 - srex - INFO - Response status: 200
2025-06-12 03:13:23,448 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:13:23.445475Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 24991922722,
  "load_duration": 8533488,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 16092436324,
  "eval_count": 60,
  "eval_duration": 8890473627
}
2025-06-12 03:13:23,448 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:13:23.445475Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 24991922722,
  "load_duration": 8533488,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 16092436324,
  "eval_count": 60,
  "eval_duration": 8890473627
}
2025-06-12 03:13:23,449 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:13:23,449 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:13:23,629 - srex - INFO - Generating policy from input: Ensure all S3 buckets have versioning enabled
2025-06-12 03:13:23,629 - srex - INFO - Generating policy from input: Ensure all S3 buckets have versioning enabled
2025-06-12 03:13:23,634 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:13:23,634 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:13:23,635 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:13:23,635 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:13:23,635 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:13:23,635 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:13:23,635 - srex - INFO - Model: llama2
2025-06-12 03:13:23,635 - srex - INFO - Model: llama2
2025-06-12 03:13:23,635 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:13:23,635 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:13:23,635 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:13:23,635 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:13:28,006 - srex - INFO - Test response status: 200
2025-06-12 03:13:28,006 - srex - INFO - Test response status: 200
2025-06-12 03:13:28,006 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:13:28.005644Z","response":"Hello! How can I help you today? Is there something you want to talk about or ask?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,366,864,304,5193,1048,470,2244,29973],"total_duration":4366927299,"load_duration":9223605,"prompt_eval_count":21,"prompt_eval_duration":441535676,"eval_count":21,"eval_duration":3915662119}
2025-06-12 03:13:28,006 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:13:28.005644Z","response":"Hello! How can I help you today? Is there something you want to talk about or ask?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,366,864,304,5193,1048,470,2244,29973],"total_duration":4366927299,"load_duration":9223605,"prompt_eval_count":21,"prompt_eval_duration":441535676,"eval_count":21,"eval_duration":3915662119}
2025-06-12 03:13:54,520 - srex - INFO - Response status: 200
2025-06-12 03:13:54,520 - srex - INFO - Response status: 200
2025-06-12 03:13:54,522 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:13:54.519169Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 26509244610,
  "load_duration": 6998516,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 17236691367,
  "eval_count": 60,
  "eval_duration": 9265095514
}
2025-06-12 03:13:54,522 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:13:54.519169Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 26509244610,
  "load_duration": 6998516,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 17236691367,
  "eval_count": 60,
  "eval_duration": 9265095514
}
2025-06-12 03:13:54,522 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:13:54,522 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:13:54,665 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:13:54,665 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:13:54,665 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:13:54,665 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:13:54,666 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:13:54,666 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:13:54,666 - srex - INFO - Model: llama2
2025-06-12 03:13:54,666 - srex - INFO - Model: llama2
2025-06-12 03:13:54,666 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:13:54,666 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:13:54,666 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:13:54,666 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:14:00,736 - srex - INFO - Test response status: 200
2025-06-12 03:14:00,736 - srex - INFO - Test response status: 200
2025-06-12 03:14:00,737 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:14:00.734762Z","response":"Hello! How can I help you today? Is there something you'd like to talk about or a task you'd like me to assist you with?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,366,29915,29881,763,304,5193,1048,470,263,3414,366,29915,29881,763,592,304,6985,366,411,29973],"total_duration":6065682301,"load_duration":8775509,"prompt_eval_count":21,"prompt_eval_duration":339000871,"eval_count":33,"eval_duration":5717437258}
2025-06-12 03:14:00,737 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:14:00.734762Z","response":"Hello! How can I help you today? Is there something you'd like to talk about or a task you'd like me to assist you with?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,366,29915,29881,763,304,5193,1048,470,263,3414,366,29915,29881,763,592,304,6985,366,411,29973],"total_duration":6065682301,"load_duration":8775509,"prompt_eval_count":21,"prompt_eval_duration":339000871,"eval_count":33,"eval_duration":5717437258}
2025-06-12 03:14:27,788 - srex - INFO - Response status: 200
2025-06-12 03:14:27,788 - srex - INFO - Response status: 200
2025-06-12 03:14:27,790 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:14:27.787136Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 27046042449,
  "load_duration": 8369310,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 17151776921,
  "eval_count": 60,
  "eval_duration": 9885191565
}
2025-06-12 03:14:27,790 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:14:27.787136Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 27046042449,
  "load_duration": 8369310,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 17151776921,
  "eval_count": 60,
  "eval_duration": 9885191565
}
2025-06-12 03:14:27,790 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:14:27,790 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:14:27,923 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:14:27,923 - srex - INFO - âœ… Connected to Ollama version 0.9.0
2025-06-12 03:14:27,924 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:14:27,924 - srex - INFO - ðŸš€ Sending prompt using model: llama2 with temperature=0.3
2025-06-12 03:14:27,924 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:14:27,924 - srex - INFO - ðŸ“¤ Sending request to Ollama at http://localhost:11434/api/generate
2025-06-12 03:14:27,924 - srex - INFO - Model: llama2
2025-06-12 03:14:27,924 - srex - INFO - Model: llama2
2025-06-12 03:14:27,924 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:14:27,924 - srex - INFO - Headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}
2025-06-12 03:14:27,924 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:14:27,924 - srex - INFO - Payload: {
  "model": "llama2",
  "prompt": "You are an expert in cloud governance and policy-as-code. Generate a valid Rego policy for Open Policy Agent based on the following plain-English requirement:\n\n\"\"\"Ensure all S3 buckets have versioning enabled\"\"\"\n\nThe policy should:\n1. Use the 'deny' rule to enforce the requirement\n2. Include metadata comments for description, SOC2, and ISO27001\n3. Be valid Rego syntax (OPA 1.0+ with 'if' keyword)\n4. Follow OPA best practices\n\nWARNING: Redeclaring a variable (e.g., 'bucket') in the same scope will cause a compilation error. Follow the example exactly.\n\nExample:\n\n# description: Ensure all S3 buckets are encrypted\n# soc2: CC6.1\n# iso27001: A.10.1.1\n\npackage main\n\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n\nRespond only with the Rego policy code. Do not include any explanations, markdown, or extra formatting.\n",
  "stream": false,
  "options": {
    "temperature": 0.3
  }
}
2025-06-12 03:14:32,035 - srex - INFO - Test response status: 200
2025-06-12 03:14:32,035 - srex - INFO - Test response status: 200
2025-06-12 03:14:32,035 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:14:32.034166Z","response":"Hello! How can I help you today? Is there something you would like to talk about or ask?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,366,723,763,304,5193,1048,470,2244,29973],"total_duration":4106739676,"load_duration":9415956,"prompt_eval_count":21,"prompt_eval_duration":321257830,"eval_count":22,"eval_duration":3775632953}
2025-06-12 03:14:32,035 - srex - INFO - Test response: {"model":"llama2","created_at":"2025-06-12T08:14:32.034166Z","response":"Hello! How can I help you today? Is there something you would like to talk about or ask?","done":true,"done_reason":"stop","context":[518,25580,29962,3532,14816,29903,29958,5299,829,14816,29903,6778,13,13,1688,518,29914,25580,29962,13,10994,29991,1128,508,306,1371,366,9826,29973,1317,727,1554,366,723,763,304,5193,1048,470,2244,29973],"total_duration":4106739676,"load_duration":9415956,"prompt_eval_count":21,"prompt_eval_duration":321257830,"eval_count":22,"eval_duration":3775632953}
2025-06-12 03:14:57,545 - srex - INFO - Response status: 200
2025-06-12 03:14:57,545 - srex - INFO - Response status: 200
2025-06-12 03:14:57,547 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:14:57.543192Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 25504747095,
  "load_duration": 7223451,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 16812343054,
  "eval_count": 60,
  "eval_duration": 8684719970
}
2025-06-12 03:14:57,547 - srex - INFO - Response: {
  "model": "llama2",
  "created_at": "2025-06-12T08:14:57.543192Z",
  "response": "```\ndeny[msg] if {\n    some bucket\n    bucket := input.resources[_]\n    bucket.type == \"aws_s3_bucket\"\n    not bucket.encryption\n    msg := \"S3 bucket is not encrypted\"\n}\n```",
  "done": true,
  "done_reason": "stop",
  "context": [
    518,
    25580,
    29962,
    3532,
    14816,
    29903,
    29958,
    5299,
    829,
    14816,
    29903,
    6778,
    13,
    13,
    3492,
    526,
    385,
    17924,
    297,
    9570,
    4095,
    749,
    322,
    8898,
    29899,
    294,
    29899,
    401,
    29889,
    3251,
    403,
    263,
    2854,
    2169,
    29877,
    8898,
    363,
    4673,
    25219,
    28330,
    2729,
    373,
    278,
    1494,
    8656,
    29899,
    24636,
    11809,
    29901,
    13,
    13,
    15945,
    29908,
    29923,
    1983,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    505,
    1873,
    292,
    9615,
    15945,
    29908,
    13,
    13,
    1576,
    8898,
    881,
    29901,
    13,
    29896,
    29889,
    4803,
    278,
    525,
    1145,
    29891,
    29915,
    5751,
    304,
    427,
    10118,
    278,
    11809,
    13,
    29906,
    29889,
    512,
    2325,
    15562,
    6589,
    363,
    6139,
    29892,
    7791,
    29907,
    29906,
    29892,
    322,
    17723,
    29906,
    29955,
    29900,
    29900,
    29896,
    13,
    29941,
    29889,
    1522,
    2854,
    2169,
    29877,
    5877,
    313,
    4590,
    29909,
    29871,
    29896,
    29889,
    29900,
    29974,
    411,
    525,
    361,
    29915,
    13553,
    29897,
    13,
    29946,
    29889,
    10306,
    6418,
    29909,
    1900,
    23274,
    13,
    13,
    29956,
    25614,
    29901,
    4367,
    687,
    29880,
    4362,
    263,
    2286,
    313,
    29872,
    29889,
    29887,
    1696,
    525,
    21454,
    1495,
    297,
    278,
    1021,
    6874,
    674,
    4556,
    263,
    14835,
    1059,
    29889,
    10306,
    278,
    1342,
    3721,
    29889,
    13,
    13,
    14023,
    29901,
    13,
    13,
    29937,
    6139,
    29901,
    22521,
    545,
    599,
    317,
    29941,
    1321,
    9737,
    526,
    23220,
    13,
    29937,
    17874,
    29906,
    29901,
    19178,
    29953,
    29889,
    29896,
    13,
    29937,
    338,
    29877,
    29906,
    29955,
    29900,
    29900,
    29896,
    29901,
    319,
    29889,
    29896,
    29900,
    29889,
    29896,
    29889,
    29896,
    13,
    13,
    5113,
    1667,
    13,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    13,
    1666,
    2818,
    871,
    411,
    278,
    2169,
    29877,
    8898,
    775,
    29889,
    1938,
    451,
    3160,
    738,
    7309,
    800,
    29892,
    2791,
    3204,
    29892,
    470,
    4805,
    15998,
    29889,
    13,
    518,
    29914,
    25580,
    29962,
    13,
    28956,
    13,
    1145,
    29891,
    29961,
    7645,
    29962,
    565,
    426,
    13,
    1678,
    777,
    20968,
    13,
    1678,
    20968,
    3490,
    1881,
    29889,
    13237,
    28513,
    29962,
    13,
    1678,
    20968,
    29889,
    1853,
    1275,
    376,
    10467,
    29918,
    29879,
    29941,
    29918,
    21454,
    29908,
    13,
    1678,
    451,
    20968,
    29889,
    3977,
    14272,
    13,
    1678,
    10191,
    3490,
    376,
    29903,
    29941,
    20968,
    338,
    451,
    23220,
    29908,
    13,
    29913,
    13,
    28956
  ],
  "total_duration": 25504747095,
  "load_duration": 7223451,
  "prompt_eval_count": 312,
  "prompt_eval_duration": 16812343054,
  "eval_count": 60,
  "eval_duration": 8684719970
}
2025-06-12 03:14:57,547 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:14:57,547 - srex - INFO - âœ… LLM response received successfully.
2025-06-12 03:14:57,695 - srex - INFO - Generating SLO from input: 99.9% of requests should complete within 200ms
2025-06-12 03:14:57,695 - srex - INFO - Generating SLO from input: 99.9% of requests should complete within 200ms
2025-06-12 03:14:57,717 - srex - INFO - Validating SLO /Users/jonathankershaw/Projects/srex/examples/test_slo.yaml
2025-06-12 03:14:57,717 - srex - INFO - Validating SLO /Users/jonathankershaw/Projects/srex/examples/test_slo.yaml
2025-06-12 03:14:57,760 - srex - ERROR - Error getting SLO history: get_slo_history() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,760 - srex - ERROR - Error getting SLO history: get_slo_history() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,775 - srex - ERROR - Error getting SLO history: get_slo_history() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,775 - srex - ERROR - Error getting SLO history: get_slo_history() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,797 - srex - ERROR - Error analyzing SLO trend: analyze_slo_trend() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,797 - srex - ERROR - Error analyzing SLO trend: analyze_slo_trend() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,811 - srex - ERROR - Error analyzing SLO trend: analyze_slo_trend() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,811 - srex - ERROR - Error analyzing SLO trend: analyze_slo_trend() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,832 - srex - ERROR - Error analyzing SLO drift: 'SLODriftRequest' object has no attribute 'live_metrics'
2025-06-12 03:14:57,832 - srex - ERROR - Error analyzing SLO drift: 'SLODriftRequest' object has no attribute 'live_metrics'
2025-06-12 03:14:57,861 - srex - INFO - Generating scorecard
2025-06-12 03:14:57,861 - srex - INFO - Generating scorecard
2025-06-12 03:14:57,881 - srex - INFO - Querying metrics with adapter prometheus
2025-06-12 03:14:57,881 - srex - INFO - Querying metrics with adapter prometheus
2025-06-12 03:14:57,915 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:14:57,915 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:14:57,916 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:14:57,916 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:14:57,943 - srex - ERROR - Error getting SLO history: get_slo_history() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,943 - srex - ERROR - Error getting SLO history: get_slo_history() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,955 - srex - ERROR - Error getting SLO history: get_slo_history() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,955 - srex - ERROR - Error getting SLO history: get_slo_history() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,970 - srex - ERROR - Error analyzing SLO trend: analyze_slo_trend() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,970 - srex - ERROR - Error analyzing SLO trend: analyze_slo_trend() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,981 - srex - ERROR - Error analyzing SLO trend: analyze_slo_trend() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,981 - srex - ERROR - Error analyzing SLO trend: analyze_slo_trend() got an unexpected keyword argument 'adapter'
2025-06-12 03:14:57,991 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:14:57,991 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:14:57,991 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:14:57,991 - srex - ERROR - Error discovering adapters: 'NoneType' object has no attribute 'get'
2025-06-12 03:14:58,002 - srex - INFO - Configuring adapter PrometheusAdapter
2025-06-12 03:14:58,002 - srex - INFO - Configuring adapter PrometheusAdapter
2025-06-12 03:14:58,008 - srex - INFO - Configuring adapter InvalidAdapter
2025-06-12 03:14:58,008 - srex - INFO - Configuring adapter InvalidAdapter
2025-06-12 03:14:58,008 - srex - ERROR - Error configuring adapter: Adapter not found: InvalidAdapter
2025-06-12 03:14:58,008 - srex - ERROR - Error configuring adapter: Adapter not found: InvalidAdapter
